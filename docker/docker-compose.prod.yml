# =============================================================================
# Medical Knowledge Platform - Production Docker Compose
# =============================================================================
# Production-ready deployment with:
# - PostgreSQL with pgvector for semantic search
# - Redis for caching and sessions
# - Nginx reverse proxy
# - SSL/TLS termination
# - Health monitoring
# - Persistent volumes
# =============================================================================

version: '3.8'

services:
  # Application Backend
  medical-platform:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
    container_name: medical-platform-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://medical_user:${POSTGRES_PASSWORD}@postgres:5432/medical_platform
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=medical_platform
      - DATABASE_USER=medical_user
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}

      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379

      # AI Provider API Keys (from .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_ORG_ID=${OPENAI_ORG_ID:-}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_PROJECT_ID=${GEMINI_PROJECT_ID}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}

      # Security & Performance
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - DEBUG=false
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,https://yourdomain.com}

      # AI Model Configuration
      - GEMINI_MODEL=gemini-2.5-pro
      - GEMINI_FEATURES=deep_search,deep_think
      - CLAUDE_MODEL=claude-3-opus-20240229
      - CLAUDE_FEATURES=extended_reasoning
      - OPENAI_MODEL=gpt-4
      - PERPLEXITY_MODEL=llama-3.1-sonar-huge-128k-online

      # Budget Controls
      - DAILY_BUDGET_OPENAI=${DAILY_BUDGET_OPENAI:-15.00}
      - DAILY_BUDGET_GEMINI=${DAILY_BUDGET_GEMINI:-15.00}
      - DAILY_BUDGET_CLAUDE=${DAILY_BUDGET_CLAUDE:-15.00}
      - DAILY_BUDGET_PERPLEXITY=${DAILY_BUDGET_PERPLEXITY:-15.00}
      - TOTAL_MONTHLY_BUDGET=${TOTAL_MONTHLY_BUDGET:-1800.00}

      # File Storage
      - UPLOAD_DIRECTORY=/app/uploads
      - REFERENCE_LIBRARY_PATH=/app/reference_library
      - MAX_UPLOAD_SIZE=100MB

      # Logging
      - LOG_LEVEL=INFO
      - LOG_FILE=/app/logs/app.log

      # Monitoring
      - ENABLE_METRICS=true
      - METRICS_PORT=9090

      # Research Configuration
      - PUBMED_EMAIL=${PUBMED_EMAIL}
      - PUBMED_API_KEY=${PUBMED_API_KEY:-}

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    volumes:
      - medical_uploads:/app/uploads
      - medical_library:/app/reference_library
      - medical_logs:/app/logs
      - medical_data:/app/data
      - medical_backups:/app/backups

    networks:
      - medical-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s

  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: medical-platform-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=medical_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=medical_platform
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./init-vector.sql:/docker-entrypoint-initdb.d/02-vector.sql
    networks:
      - medical-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medical_user -d medical_platform"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: medical-platform-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: medical-platform-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - medical_logs:/var/log/nginx
    depends_on:
      - medical-platform
    networks:
      - medical-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring (Prometheus - Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: medical-platform-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - medical-network
    profiles:
      - monitoring

# Named Volumes for Data Persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  medical_uploads:
    driver: local
  medical_library:
    driver: local
  medical_logs:
    driver: local
  medical_data:
    driver: local
  medical_backups:
    driver: local
  prometheus_data:
    driver: local

# Networks
networks:
  medical-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16